export type FerryState = 'LOADING' | 'READY' | 'DEAL_PENDING' | 'DEAL_PROCESSED'

export interface CarItem {
  link: string
  size: number
  commitmentProof: string
  src: string[]
}

export interface CarItemFerry {
  link: string
  size: number
}

export interface FerryTable {
  addCargo: (id: string, items: CarItemFerry[]) => Promise<void>
  getCargo: (id: string, options?: QueryOpts) => AsyncGenerator<CarItemFerry, void, unknown>
  getFerryLoading: () => Promise<string>
  setAsReady: (id: string) => Promise<void>
  setAsDealPending: (id: string) => Promise<void>
  setAsDealProcessed: (id: string, commP: string) => Promise<void>
}

export interface FerryOpts {
  endpoint?: string
  maxSize?: number
  minSize?: number
  cargoTableName?: string
}

export interface CarTable {
  batchGet: (items: { link: string }[]) => Promise<CarItem[]>
  batchWrite: (items: CarItem[]) => Promise<void>
}

export interface CarOpts {
  endpoint?: string
}

export interface QueryOpts {
  limit?: number
}

export interface StorefrontSignerCtx {
  DID?: string
  PRIVATE_KEY: string
}

export interface AggregationServiceCtx {
  DID: string
  URL: string
}

// would be generated by sst, but requires `sst build` to be run, which calls out to aws; not great for CI
declare module '@serverless-stack/node/config' {
  export interface SecretResources {
    PRIVATE_KEY: {
      value: string
    }
  }
}
